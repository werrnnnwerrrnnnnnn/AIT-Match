<!-- User Management Container -->
<div class="container">
  <!-- Search and Sort Controls -->
<div class="container-box">
  <!-- Search form with custom search bar and search button inside -->
  <div class="custom-search-bar">
    <input type="text" id="searchInput" placeholder="Search by Username" onkeyup="searchTable()" class="form-control" />
    <button type="button" onclick="searchTable()">üîç</button>
  </div>
  
  <!-- Sort Buttons Container with reduced gap -->
  <div class="sort-buttons">
    <button onclick="sortTable(true)" class="sort-btn">Sort A-Z</button>
    <button onclick="sortTable(false)" class="sort-btn">Sort Z-A</button>
  </div>
</div>
  
  <!-- User Management Table -->
  <div class="user-management">
    <table id="userTable">
      <thead>
        <tr>
          <th>Username</th>
          <th>Email</th>
          <th>Role</th>
          <th>View Profile</th>
          <th>Delete</th>
        </tr>
      </thead>
      <tbody>
        <% @users.each do |user| %>
          <tr>
            <td><%= user.profile&.user_name %></td> <!-- Display username if available -->
            <td><%= user.email %></td>
            <td><%= user.role %></td>
            <td>
              <% if user.profile.present? %>
                <%= link_to 'View Profile', profile_path(user.profile), class: 'btn' %>
              <% end %>
            </td>
            <td>
              <% unless user == current_user %>
                <%= button_to 'Delete', admin_user_path(user), method: :delete, class: 'btn btn-danger delete-button', id: "delete-user-#{user.id}", data: { username: user.profile&.user_name, user_id: user.id } %>
              <% end %>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
</div>

<script>
  // JavaScript function to sort the table by username
  function sortTable(ascending) {
    const table = document.getElementById("userTable");
    const rows = Array.from(table.rows).slice(1);
    
    rows.sort((a, b) => {
      const usernameA = a.cells[0].textContent.toLowerCase();
      const usernameB = b.cells[0].textContent.toLowerCase();
      
      if (usernameA < usernameB) return ascending ? -1 : 1;
      if (usernameA > usernameB) return ascending ? 1 : -1;
      return 0;
    });
    
    rows.forEach(row => table.appendChild(row));
  }

  // JavaScript function to filter the table by username
  function searchTable() {
    const input = document.getElementById("searchInput").value.toLowerCase();
    const table = document.getElementById("userTable");
    const rows = table.getElementsByTagName("tr");
    
    for (let i = 1; i < rows.length; i++) {
      const username = rows[i].cells[0].textContent.toLowerCase();
      rows[i].style.display = username.includes(input) ? "" : "none";
    }
  }

// Ensure deleteListenersApplied is declared only once
if (typeof deleteListenersApplied === 'undefined') {
  var deleteListenersApplied = false;
}

function applyDeleteConfirmation() {
  // Check if listeners have been applied to prevent duplicate listeners
  if (!deleteListenersApplied) {
    const deleteButtons = document.querySelectorAll(".delete-button");

    deleteButtons.forEach(button => {
      // Remove any existing click listener to prevent duplication
      button.removeEventListener("click", handleDeleteClick);

      // Attach the click listener
      button.addEventListener("click", handleDeleteClick);
    });

    deleteListenersApplied = true; // Set flag to prevent re-adding listeners
  }
}

function handleDeleteClick(event) {
  event.preventDefault();
  const button = event.currentTarget;
  const username = button.getAttribute("data-username");

  // Prompt for confirmation
  const input = prompt("Type the username to confirm deletion:");

  // Check if input is valid
  if (input === username && input !== null && input.trim() !== "") {
    deleteListenersApplied = false; // Reset flag before submitting
    button.closest("form").submit();
  } else if (input !== null) {
    alert("Username does not match or input is empty. Deletion canceled.");
  }
}

// Apply listeners on initial page load
document.addEventListener("DOMContentLoaded", applyDeleteConfirmation);

// Ensure listeners are reapplied after navigation without refreshing
window.addEventListener("pageshow", () => {
  deleteListenersApplied = false; // Reset flag on page re-show to reapply listeners
  applyDeleteConfirmation();
});
</script>

<!-- CSS Styling for User Management Table -->
<style>
  /* Main content styling to prevent overlap with navbar and footer */
  .main-content {
    padding-top: 100px; /* Adjust to add space below the navbar */
    padding-bottom: 100px; /* Adjust to add space above the footer */
    margin-top: 20px; /* Extra margin for spacing */
    margin-bottom: 20px; /* Extra margin for spacing */
  }

  /* Optional additional styling to ensure responsiveness */
  @media (max-width: 768px) {
    .main-content {
      padding-top: 80px; /* Slightly less space for smaller screens */
      padding-bottom: 80px;
      margin-top: 10px;
      margin-bottom: 10px;
    }
  }

  /* User Management Container Styling */
  .container {
    max-width: 1200px;
    margin: 70px auto; /* Add top and bottom margin to prevent hiding by navbar and footer */
    padding: 20px;
    border-radius: 10px; /* Adjust this value for desired roundness */
    background-color: transparent; /* Make container transparent */
  }

  /* Controls Styling */
  .container-box {
    border: 2px solid white;
    background-color: white;
    border-radius: 20px;
    padding: 20px;
    width: 80%;
    max-width: 605px;
    margin-left: 0;
    margin-right: auto;
    text-align: left;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  /* Search Bar Styling */
  .custom-search-bar {
    position: relative;
    display: flex;
    align-items: center;
    background-color: #F5F5F5;
    padding: 0px;
    border-radius: 50px;
    width: 60%;
    height: 30px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .custom-search-bar input[type="text"] {
    flex: 1;
    border: none;
    background-color: transparent;
    padding: 6px 13px;
    font-size: 14px;
    border-radius: 50px;
    outline: none;
    padding-right: 30px;
    color: #000;
    margin: 10px 0px;
  }

  .custom-search-bar input[type="text"]::placeholder {
    color: #bbb;
    font-size: 14px;
  }

  .custom-search-bar button {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    width: 25px;
    height: 25px;
    background-color: transparent;
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 18px;
    color: #000;
  }

  .sort-buttons {
    display: flex;
    gap: 5px; /* Adjust gap here to reduce the space between Sort A-Z and Sort Z-A buttons */
    }


  /* Sort Button Styling */
  .sort-btn {
    background-color: #F5F5F5;
    color: #617952;
    font-weight: bold;
    font-size: 14px;
    border: none;
    padding: 5px 10px;
    border-radius: 20px;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
    transition: transform 0.3s ease, background-color 0.3s ease, color 0.3s ease;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
    margin-right: 5px;
  }

  .sort-btn:hover {
    background-color: #e0e0e0;
    transform: translateY(-3px);
    box-shadow: 0px 6px 8px rgba(0, 0, 0, 0.2);
  }

  /* User Management Table Styling */
  .user-management {
    width: 100%;
    border-collapse: collapse; /* Ensures borders collapse */
    margin-top: 30px; /* Adjust this value to add space above the table */
    }

  table {
    width: 100%;
    border-collapse: collapse;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  thead tr:first-child th:first-child {
    border-top-left-radius: 10px;
  }

  thead tr:first-child th:last-child {
    border-top-right-radius: 10px;
  }

  tbody tr:last-child td:first-child {
    border-bottom-left-radius: 10px;
  }

  tbody tr:last-child td:last-child {
    border-bottom-right-radius: 10px;
  }

  thead tr {
    background-color: #617952;
    color: white;
    text-align: left;
  }

  th, td {
    padding: 12px;
    text-align: left;
    border: 1px solid #ddd;
  }

  td:nth-child(3), td:nth-child(4), td:nth-child(5),
  th:nth-child(3), th:nth-child(4), th:nth-child(5) {
    text-align: center;
  }

  tr {
    background-color: white;
  }

  .btn {
    background-color: #F7DDE3;
    color: #617952;
    font-weight: bold;
    font-size: 14px;
    border: none;
    padding: 5px 10px;
    border-radius: 20px;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
    transition: transform 0.3s ease, background-color 0.3s ease, color 0.3s ease;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
  }

  .btn:hover {
    background-color: #FBCAD0;
    transform: translateY(-3px);
    box-shadow: 0px 6px 8px rgba(0, 0, 0, 0.2);
  }

  .btn-danger {
    background-color: #FF5252;
    color: white;
  }

  .btn-danger:hover {
    background-color: #ff3e3e;
  }
</style>